@page "/Feiras"

@using MercadUM.Areas.Feiras.Pages.Manage;
@using MercadUM.Areas.Identity.Pages.Account;
@using MercadUM.Model;
@using MercadUM.SqlDataAccess;


@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IUserAccess _dbua
@inject IAdicionarFeiraModel _dbf
@inject IRegisterModel _dbu
@inject NavigationManager UriHelper


<style>
<!-- HTML !-->
.button-17 {
  align-items: center;
  appearance: none;
  background-color: #fff;
  border-radius: 24px;
  border-style: none;
  box-shadow: rgba(0, 0, 0, .2) 0 3px 5px -1px,rgba(0, 0, 0, .14) 0 6px 10px 0,rgba(0, 0, 0, .12) 0 1px 18px 0;
  box-sizing: border-box;
  color: #3c4043;
  cursor: pointer;
  display: inline-flex;
  fill: currentcolor;
  font-family: "Google Sans",Roboto,Arial,sans-serif;
  font-size: 14px;
  font-weight: 500;
  height: 48px;
  justify-content: center;
  letter-spacing: .25px;
  line-height: normal;
  max-width: 100%;
  overflow: visible;
  padding: 2px 24px;
  position: relative;
  text-align: center;
  text-transform: none;
  transition: box-shadow 280ms cubic-bezier(.4, 0, .2, 1),opacity 15ms linear 30ms,transform 270ms cubic-bezier(0, 0, .2, 1) 0ms;
  user-select: none;
  -webkit-user-select: none;
  touch-action: manipulation;
  width: auto;
  will-change: transform,opacity;
  z-index: 0;
}

.button-17:hover {
  background: #F6F9FE;
  color: #174ea6;
}

.button-17:active {
  box-shadow: 0 4px 4px 0 rgb(60 64 67 / 30%), 0 8px 12px 6px rgb(60 64 67 / 15%);
  outline: none;
}

.button-17:focus {
  outline: none;
  border: 2px solid #4285f4;
}

.button-17:not(:disabled) {
  box-shadow: rgba(60, 64, 67, .3) 0 1px 3px 0, rgba(60, 64, 67, .15) 0 4px 8px 3px;
}

.button-17:not(:disabled):hover {
  box-shadow: rgba(60, 64, 67, .3) 0 2px 3px 0, rgba(60, 64, 67, .15) 0 6px 10px 4px;
}

.button-17:not(:disabled):focus {
  box-shadow: rgba(60, 64, 67, .3) 0 1px 3px 0, rgba(60, 64, 67, .15) 0 4px 8px 3px;
}

.button-17:not(:disabled):active {
  box-shadow: rgba(60, 64, 67, .3) 0 4px 4px 0, rgba(60, 64, 67, .15) 0 8px 12px 6px;
}

.button-17:disabled {
  box-shadow: rgba(60, 64, 67, .3) 0 1px 3px 0, rgba(60, 64, 67, .15) 0 4px 8px 3px;
}
</style>


<h3>Feiras</h3>
@if (feiras is null)
{
    <p><em>A carregar...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Nome</th>
                <th>Descrição</th>
                <th>Data de início</th>
                <th>Data de fim</th>
                <th>Número de barracas</th>
                @if (@user_access.TipoDeConta == "2")
                {
                    <th>Adicionar Barraca à feira</th>
                }

                    <th></th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var feira in feiras)
            {
                <tr>
                    <td>
                        <button class="button-17" @onclick="() => Navigate(feira)"> @feira.Nome </button>
                    </td>
                    <td>@feira.Descricao</td>
                    <td>@feira.Data_inicio</td>
                    <td>@feira.Data_fim</td>
                    <td>@feira.N_Barracas</td>
                    <td>
                        @if (@user_access.TipoDeConta == "2")
                        {
                            <td class="col-md-12">
                            <button class="button-17" @onclick="() => NavigateNovaBarraca(feira)"> Adicionar </button>
                            </td>
                        }
                    </td>
                    <td> </td>
                </tr>
            }
        </tbody>
    </table>
}


@code {
    private List<ApplicationFeira> feiras;
    private List<ApplicationUser> utilizadores;
    private ApplicationUser user_access = new ApplicationUser();
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    protected override async Task OnInitializedAsync()
    {
        feiras = await _dbf.GetFeiras();
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        if (user.Identity.IsAuthenticated)
        {
            List<ApplicationUser> arg = await _dbua.GetUserByEmail(user.Identity.Name);
            user_access = arg[0];

        }

    }

    public ApplicationUser? GetOrganizador(string id)
    {
        foreach (var organizador in utilizadores)
        {
            if (organizador.TipoDeConta == "1" && organizador.Id == id)
            {
                return organizador;
            }
        }
        return null;
    }



    void Navigate(ApplicationFeira f)
    {

            UriHelper.NavigateTo(UrlFeira(f));
    }

    string UrlFeira(ApplicationFeira f)
    {
        return f.Nome + "/Barracas/";
    }
    
    string UrlAdicionarBarraca(ApplicationFeira f){
        return f.Id_Feiras;
    }

    void NavigateNovaBarraca(ApplicationFeira u)
    {
        UriHelper.NavigateTo(UrlAdicionarBarraca(u) + "/AdicionarBarraca");
    }

}
