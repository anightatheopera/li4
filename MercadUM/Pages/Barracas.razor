@page "/{UrlFeira}/Barracas/"


@using MercadUM.Model;
@using MercadUM.SqlDataAccess;
@using Microsoft.AspNetCore.Http.Extensions;
@using MercadUM.Areas.Identity.Pages.Account;
@using MercadUM.Areas.Barracas.Pages.Manage;
@using MercadUM.Areas.Feiras.Pages.Manage;

@inject IUserAccess _dbua
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IRegisterModel _dbu
@inject IAdicionarBarracaModel _dbb
@inject IAdicionarFeiraModel _dbf
@inject NavigationManager UriHelper

<h3>Barracas</h3>
@if (barracas is null)
{
    <p><em>A carregar...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Nome</th>
                <th>Descrição</th>
                <th>Feira</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var barraca in GetBarracas())
            {

                    <tr>
                    <td>
                        <button @onclick="() => Navigate(barraca)"> @barraca.Nome </button>
                    </td>
                    <td>@barraca.Descricao </td>
                    <td>@UrlFeira </td>
                    <td>
                        @if (@user_access.TipoDeConta == "2" && barraca.Id_Vendedor == user_access.Id)
                        {
                        <td>
                            <Button Class="floating" @onclick="() => NavigateNovoProduto(barraca)"> Selecione este botão para adicionar um produto novo à barraca</Button>
                        </td>
                        }
                    </td>
                </tr>
                
            }
        </tbody>
    </table>
}


@code {
    private ApplicationUser user_access = new ApplicationUser();
    private List<ApplicationBarraca> barracas;
    private List<ApplicationUser> utilizadores;
    private ApplicationFeira feira;


    [Parameter]
    public string UrlFeira { get; set; }


    public ApplicationFeira? GetFeira (List<ApplicationFeira> feiras, string NomeFeira) {
        foreach (var f in feiras)
        {
            if (f.Nome == NomeFeira)
            {
                return f;
            }
        }
        return null;
    }



    protected override async Task OnInitializedAsync()
    {
        feira = GetFeira(await _dbf.GetFeiras(), UrlFeira);
        barracas = await _dbb.GetBarracas();
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        if (user.Identity.IsAuthenticated)
        {
            List<ApplicationUser> arg = await _dbua.GetUserByEmail(user.Identity.Name);
            user_access = arg[0];

        }

    }

    public ApplicationUser? GetVendedor(string id)
    {
        foreach (var vendedor in utilizadores)
        {
            if (vendedor.Id == id && vendedor.TipoDeConta == "2")
            {
                return vendedor;
            }
        }
        return null;
    }

    public List<ApplicationBarraca> GetBarracas()
    {
        List<ApplicationBarraca> ret = new List<ApplicationBarraca>();
        foreach (var b in barracas)
        {
            if (b.Id_Feira == feira.Id_Feiras)
            {
                ret.Add(b);
            }
        }
        return ret;

    }

    void Navigate(ApplicationBarraca b)
    {


        UriHelper.NavigateTo(UrlBarraca(b));


    }

    string UrlBarraca(ApplicationBarraca b)
    {
        return  b.Nome + "/Produtos/";
    }

    void NavigateNovoProduto(ApplicationBarraca b)
    {
        UriHelper.NavigateTo(UrlNovoProduto(b) +"/AdicionarProduto/");
    }
    
    string UrlNovoProduto(ApplicationBarraca b)
    {
        return b.Id_Barracas;
    }

}
