@page "/{UrlAdicionarBarraca}/AdicionarBarraca"



@using MercadUM.Areas.Feiras.Pages.Manage;
@using MercadUM.Areas.Barracas.Pages.Manage;
@using MercadUM.Model;
@using MercadUM.SqlDataAccess;
@using Microsoft.AspNetCore.Mvc;


@inject IAdicionarFeiraModel _dbf
@inject IUserAccess _dbu
@inject IAdicionarBarracaModel _dbb
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject ILogger<ApplicationFeira> Logger
@inject IJSRuntime JS




    <PageTitle>Adicionar Barracas</PageTitle>


    <EditForm Model="@barracaNova" OnValidSubmit="@HandleValidSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <div class="row">
            <div class="col-md-4">

                <h2>Crie uma nova barraca</h2>
                <hr />
                <br />
                <label> Nome da Barraca</label>
                <div class="form-group">
                    <InputText id="Nome" @bind-Value="barracaNova.Nome" />
                </div>
                <br />
                <label> Url do Logótipo </label>
                <div class="form-group">
                    <InputText id="Logótipo" @bind-Value="barracaNova.Url_logotipo" />
                </div>
                <br />
                <button id="registerSubmit" type="submit" class="w-100 btn btn-lg btn-primary">Criar barraca</button>

            </div>
        </div>
    </EditForm>




@code {

    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    private ApplicationBarraca barracaNova = new ApplicationBarraca();
    private ApplicationUser user_access = new ApplicationUser();
    private ApplicationFeira feiraNova = new ApplicationFeira();

    [Parameter]
    public string UrlAdicionarBarraca { get; set; }
    
    private async void HandleValidSubmit()
    {


        Logger.LogInformation("HandleSubmit called");
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        Console.WriteLine(user.ToString());
        if (user.Identity.IsAuthenticated)
        {
            List<ApplicationFeira> list = await _dbf.GetFeirasById(UrlAdicionarBarraca);
            List<ApplicationUser> arg = await _dbu.GetUserByEmail(user.Identity.Name);
            feiraNova = list[0];
            user_access = arg[0];
            barracaNova.Id_Feira = feiraNova.Id_Feiras;
            barracaNova.Id_Vendedor = user_access.Id;
            await _dbb.InsertBarraca(barracaNova);
            feiraNova.N_Barracas++;
            await Task.CompletedTask;
            await JS.InvokeVoidAsync("alert", "Barraca criada");
        }


    }







}