@page "/{UrlNovoProduto}/AdicionarProduto"
@using MercadUM.Areas.Produtos.Pages.Manage;
@using MercadUM.Model;
@using Microsoft.AspNetCore.Mvc;
@using Microsoft.AspNetCore.Components.Forms



@inject IImageHandler _dbi
@inject IAdicionarProdutoModel _dbp
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject ILogger<ApplicationFeira> Logger
@inject IJSRuntime JS

<PageTitle>Adicionar Produtos</PageTitle>

<EditForm Model="@produtoNova" OnValidSubmit="@HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div class="row">
        <div class="col-md-4">

            <h2>Adicione um novo produto.</h2>
            <hr />
            <br />
            <label> Nome do produto </label>
            <div class="form-group">
                <InputText id="Nome" @bind-Value="produtoNova.Nome" />
            </div>
            <br />
            <label> Descrição </label>
            <div class="form-group">
                <InputText id="Descricao" @bind-Value="produtoNova.Descricao" />
            </div>
            <br />
            <label> Imagem 
                <form @onsubmit="upload_image">
                <InputFile OnChange="OnInputFileChange" multiple class="btn btn-primary" />
                <button type="submit" class="btn btn-secundary">Fazer upload da imagem</button>
                </form>
            </label>
            <br />
            <label> Preço </label>
            <div class="form-group">
                <InputNumber id="Preco" @bind-Value="produtoNova.Preco" />
            </div>
            <br />
            <label> Stock disponível</label>
            <div class="form-group">
                <InputNumber id="N_barracas" @bind-Value="produtoNova.Stock" min="0" max="999" />
            </div>
            <br />
            <button id="registerSubmit" type="submit" class="w-100 btn btn-lg btn-primary">Adicionar produto</button>

        </div>
    </div>
</EditForm>


@code {

    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    private ApplicationProduto produtoNova = new ApplicationProduto();

    [Parameter]
    public string UrlNovoProduto { get; set; }

    private async void HandleValidSubmit()
    {


        Logger.LogInformation("HandleSubmit called");
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        Console.WriteLine(user.ToString());
        if (user.Identity.IsAuthenticated)
        {
            produtoNova.Id_Barraca = UrlNovoProduto;
            await _dbp.InsertProduto(produtoNova);
            await Task.CompletedTask;
            await JS.InvokeVoidAsync("alert", "Produto criado");
            await JS.InvokeVoidAsync("alert", produtoNova.Imagem == null);
        }

    }
    
    IReadOnlyList<IBrowserFile> ficheirosSelecionados;

    private void OnInputFileChange(InputFileChangeEventArgs e)
    {
        ficheirosSelecionados = e.GetMultipleFiles();
        this.StateHasChanged();
    }

    private async void upload_image()
    {
        if (ficheirosSelecionados == null)
        {
            await JS.InvokeVoidAsync("alert", "Nenhum ficheiro selecionado");
            return;
        }
        produtoNova.Imagem = await _dbi.SaveImageAsync(ficheirosSelecionados[0], "product_" + produtoNova.Nome + "barraca_" + UrlNovoProduto);
        await JS.InvokeVoidAsync("alert", produtoNova.Imagem);
        this.StateHasChanged();
    }


}