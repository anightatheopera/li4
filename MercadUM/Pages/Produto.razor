@page "/{UrlProduto}/"


@using MercadUM.Areas.Barracas.Pages.Manage;
@using MercadUM.Areas.Feiras.Pages.Manage;
@using MercadUM.Areas.Identity.Pages.Account;
@using MercadUM.Areas.Produtos.Pages.Manage;
@using MercadUM.Model;
@using Microsoft.AspNetCore.Http.Extensions;


@inject IRegisterModel _dbu
@inject IAdicionarBarracaModel _dbb
@inject IAdicionarFeiraModel _dbf
@inject IAdicionarProdutoModel _dbp
@inject NavigationManager UriHelper
@inject HttpClient Http
@inject IJSRuntime JS

<style>
    <!-- HTML ! -->
    .button-17 {
        align-items: center;
        appearance: none;
        background-color: #fff;
        border-radius: 24px;
        border-style: none;
        box-shadow: rgba(0, 0, 0, .2) 0 3px 5px -1px,rgba(0, 0, 0, .14) 0 6px 10px 0,rgba(0, 0, 0, .12) 0 1px 18px 0;
        box-sizing: border-box;
        color: #3c4043;
        cursor: pointer;
        display: inline-flex;
        fill: currentcolor;
        font-family: "Google Sans",Roboto,Arial,sans-serif;
        font-size: 14px;
        font-weight: 500;
        height: 48px;
        justify-content: center;
        letter-spacing: .25px;
        line-height: normal;
        max-width: 100%;
        overflow: visible;
        padding: 2px 24px;
        position: relative;
        text-align: center;
        text-transform: none;
        transition: box-shadow 280ms cubic-bezier(.4, 0, .2, 1),opacity 15ms linear 30ms,transform 270ms cubic-bezier(0, 0, .2, 1) 0ms;
        user-select: none;
        -webkit-user-select: none;
        touch-action: manipulation;
        width: auto;
        will-change: transform,opacity;
        z-index: 0;
    }

    .button-17:hover {
        background: #F6F9FE;
        color: #174ea6;
    }

    .button-17:active {
        box-shadow: 0 4px 4px 0 rgb(60 64 67 / 30%), 0 8px 12px 6px rgb(60 64 67 / 15%);
        outline: none;
    }

    .button-17:focus {
        outline: none;
        border: 2px solid #4285f4;
    }

    .button-17:not(:disabled) {
        box-shadow: rgba(60, 64, 67, .3) 0 1px 3px 0, rgba(60, 64, 67, .15) 0 4px 8px 3px;
    }

        .button-17:not(:disabled):hover {
            box-shadow: rgba(60, 64, 67, .3) 0 2px 3px 0, rgba(60, 64, 67, .15) 0 6px 10px 4px;
        }

        .button-17:not(:disabled):focus {
            box-shadow: rgba(60, 64, 67, .3) 0 1px 3px 0, rgba(60, 64, 67, .15) 0 4px 8px 3px;
        }

        .button-17:not(:disabled):active {
            box-shadow: rgba(60, 64, 67, .3) 0 4px 4px 0, rgba(60, 64, 67, .15) 0 8px 12px 6px;
        }

    .button-17:disabled {
        box-shadow: rgba(60, 64, 67, .3) 0 1px 3px 0, rgba(60, 64, 67, .15) 0 4px 8px 3px;
    }
</style>


@if (produto is null)
{
    <p><em>A carregar...</em></p>
}
else
{
    <div class="container">
        <div class="row">
            <div class="col-12 mb-3"><h4>Detalhes do Produto</h4></div>
        </div>
        <div class="card product-details">
            <div class="card-body">
                <div class="row my-2">
                    <div class="col-12 col-md-5 d-flex align-items-center justify-content-center mb-2 mb-md-0">
                        <div class="d-flex align-items-center justify-content-center">
                            <img src="@produto.Imagem" class="product-image img-fluid" alt="product image" />
                        </div>
                    </div>
                    <div class="col-12 col-md-7">
                        <h4>@produto.Nome</h4>
                        <div class="d-flex flex-wrap mt-1">
                            <h4 class="text-primary mr-1">@produto.Preco€</h4>
                        </div>
                        @if (@produto.Stock > 0)
                        {
                            <p>Em stock <span class="text-success"></span></p>
                            
                        }
                        else
                        {
                            <p>Produto esgotado <span class="text-danger"></span></p>
                        }
                        <p>
                            @produto.Descricao
                        </p>
                        <div class="d-flex flex-column flex-sm-row pt-1">
                            @if (@produto.Stock > 0)
                            {
                                <button class="button-17">Adicionar ao carrinho</button>
                            }
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
}


@code {

    private List<ApplicationProduto> produtos;
    private ApplicationProduto produto;

    [Parameter]
    public string UrlProduto { get; set; }

    protected override async Task OnInitializedAsync()
    {
        produtos = await _dbp.GetProdutos();
        produto = GetProduto(produtos, UrlProduto);
    }

    public ApplicationProduto? GetProduto(List<ApplicationProduto> produtos, string nome)
    {

        foreach (var b in produtos)
        {

            if (b.Nome == nome)
            {

                return b;
            }
        }
        return null;
    }

    private async Task<Stream> GetImageStreamAsync()
    {
        return await Http.GetStreamAsync(
            "https://avatars.githubusercontent.com/u/9141961");
    }

    private async Task SetImageAsync()
    {
        var imageStream = await GetImageStreamAsync();
        var dotnetImageStream = new DotNetStreamReference(imageStream);
        await JS.InvokeVoidAsync("setImage", "image", dotnetImageStream);
    }

}
