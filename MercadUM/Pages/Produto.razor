@page "/{UrlProduto}/"

@using DataAccessLibrary
@using DataAccessLibrary.Model
@using Microsoft.AspNetCore.Http.Extensions;


@inject IUtilizadoresData _dbu
@inject IBarracasData _dbb
@inject IFeirasData _dbf
@inject IProdutosData _dbp
@inject NavigationManager UriHelper
@inject HttpClient Http
@inject IJSRuntime JS

<h3>Produto</h3>
<p>
    <img id="image" />
</p>


@if (produto is null)
{
    <p><em>A carregar...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Nome</th>
                <th>Descrição</th>
                <th>Preço</th>
                <th>Stock</th>
            </tr>
        </thead>
        <tbody>

                <tr>
                    <td>@produto.Nome </td>
                    <td>@produto.Descricao </td>
                    <td>@produto.Preco</td>
                    <td>@produto.Stock</td>

                </tr>

            
        </tbody>
    </table>
}


@code {

    private List<ProdutoModel> produtos;
    private ProdutoModel produto;

    [Parameter]
    public string UrlProduto { get; set; }

    protected override async Task OnInitializedAsync()
    {
        produtos = await _dbp.GetProdutos();
        produto = GetProduto(produtos, UrlProduto);
    }

    public ProdutoModel GetProduto(List<ProdutoModel> produtos, string nome)
    {

        foreach (var b in produtos)
        {

            if (b.Nome == nome)
            {

                return b;
            }
        }
        return null;
    }

    private async Task<Stream> GetImageStreamAsync()
    {
        return await Http.GetStreamAsync(
            "https://avatars.githubusercontent.com/u/9141961");
    }

    private async Task SetImageAsync()
    {
        var imageStream = await GetImageStreamAsync();
        var dotnetImageStream = new DotNetStreamReference(imageStream);
        await JS.InvokeVoidAsync("setImage", "image", dotnetImageStream);
    }

}
