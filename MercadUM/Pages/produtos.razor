@page "/{UrlBarracas}/Produtos/"


@using MercadUM.Areas.Identity.Pages.Account;
@using MercadUM.Areas.Barracas.Pages.Manage;
@using MercadUM.Areas.Feiras.Pages.Manage;
@using MercadUM.Areas.Produtos.Pages.Manage;
@using MercadUM.Model;
@using Microsoft.AspNetCore.Http.Extensions;



@inject IRegisterModel _dbu
@inject IAdicionarProdutoModel _dbp
@inject IAdicionarBarracaModel _dbb
@inject IAdicionarFeiraModel _dbf
@inject NavigationManager UriHelper
@inject HttpClient Http
@inject IJSRuntime JS

<style>
    .text-break-line-2 {
        height: 50px;
    }
    .text-break-line-2 {
        overflow: hidden;
        text-overflow: ellipsis;
        display: -webkit-box;
        -webkit-line-clamp: 2;
        -webkit-box-orient: vertical;
        padding: 1px 0px;
        text-align: left;
    }
    img {
        max-width: 100%;
    }
    img {
        vertical-align: middle;
        border-style: none;
    }
    .rounded-xl {
        border-radius: 12px !important;
    }
    .shadow {
        box-shadow: 0 0.5rem 1rem rgb(0 0 0 / 15%) !important;
    }
    .overflow-hidden {
        overflow: hidden !important;
    }
    .border {
        border: 1px solid #dee2e6 !important;
    }
</style>

<h3>Produtos</h3>
@if (produtos is null)
{
    <p><em>A carregar...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Nome</th>
                <th>Descrição</th>
                <th>Preço</th>
                <th>Stock</th>
            </tr>
        </thead>
        <tbody>

            @foreach (var produto in produtos)
            {

                <tr>

                    <td>
                        <button @onclick="() => Navigate(produto)"> @produto.Nome </button>
                    </td>
                    <td>@produto.Descricao </td>
                    <td>@produto.Preco</td>
                    <td>@produto.Stock</td>

                </tr>

            }
        </tbody>
    </table>
}


@code {

    private List<ApplicationProduto> produtos;
    private List<ApplicationUser> utilizadores;
    private ApplicationBarraca barraca;

    [Parameter]
    public string UrlBarracas { get; set; }

    public ApplicationBarraca? GetBarracas(List<ApplicationBarraca> barracas, string NomeBarraca)
    {

        foreach (var b in barracas )
        {
            
            if (b.Nome == NomeBarraca)
            {

                return b;
            }
        }
        return null;
    }



    protected override async Task OnInitializedAsync()
    {
        barraca = GetBarracas(await _dbb.GetBarracas(), UrlBarracas);
        produtos = await _dbp.GetProdutosByBarraca(barraca.Id_Barracas);

    }

    public ApplicationUser GetVendedor(string id)
    {
        foreach (var vendedor in utilizadores)
        {
            if (vendedor.TipoDeConta == "2")
            {
                if (vendedor.Id== id)
                {
                    return vendedor;
                }
            }
        }
        return null;
    }

    
    public List<ApplicationProduto> GetProdutos()
    {
        List<ApplicationProduto> ret = new List<ApplicationProduto>();
        foreach (var p in produtos)
        {
            if (p.Id_Barraca == barraca.Id_Feira)
            {
                ret.Add(p);
            }
        }
        return ret;

    }
    
    void Navigate(ApplicationProduto p)
    {

        UriHelper.NavigateTo(UrlProduto(p));


    }

    string UrlProduto(ApplicationProduto p)
    {
        return p.Nome;
    }

    private async Task<Stream> GetImageStreamAsync(ApplicationProduto p)
    {
        return await Http.GetStreamAsync(p.Imagem);
    }

    private async Task SetImageAsync(ApplicationProduto p)
    {
        var imageStream = await GetImageStreamAsync(p);
        var dotnetImageStream = new DotNetStreamReference(imageStream);
        await JS.InvokeVoidAsync("setImage", "image", dotnetImageStream);
    }




}
