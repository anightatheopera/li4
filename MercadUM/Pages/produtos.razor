@page "/{UrlBarracas}/Produtos/"


@using MercadUM.Areas.Identity.Pages.Account;
@using MercadUM.Areas.Barracas.Pages.Manage;
@using MercadUM.Areas.Feiras.Pages.Manage;
@using MercadUM.Areas.Produtos.Pages.Manage;
@using MercadUM.Model;
@using Microsoft.AspNetCore.Http.Extensions;



@inject IRegisterModel _dbu
@inject IAdicionarProdutoModel _dbp
@inject IAdicionarBarracaModel _dbb
@inject IAdicionarFeiraModel _dbf
@inject NavigationManager UriHelper
@inject HttpClient Http
@inject IJSRuntime JS

<style>
    .text-break-line-2 {
        height: 50px;
    }

    .text-break-line-2 {
        overflow: hidden;
        text-overflow: ellipsis;
        display: -webkit-box;
        -webkit-line-clamp: 2;
        -webkit-box-orient: vertical;
        padding: 1px 0px;
        text-align: left;
    }

    img {
        max-width: 100%;
    }

    img {
        vertical-align: middle;
        border-style: none;
    }

    .rounded-xl {
        border-radius: 12px !important;
    }

    .shadow {
        box-shadow: 0 0.5rem 1rem rgb(0 0 0 / 15%) !important;
    }

    .overflow-hidden {
        overflow: hidden !important;
    }

    .border {
        border: 1px solid #dee2e6 !important;
    }
</style>

<style>
    <!-- HTML ! -->
    .button-17 {
        align-items: center;
        appearance: none;
        background-color: #fff;
        border-radius: 24px;
        border-style: none;
        box-shadow: rgba(0, 0, 0, .2) 0 3px 5px -1px,rgba(0, 0, 0, .14) 0 6px 10px 0,rgba(0, 0, 0, .12) 0 1px 18px 0;
        box-sizing: border-box;
        color: #3c4043;
        cursor: pointer;
        display: inline-flex;
        fill: currentcolor;
        font-family: "Google Sans",Roboto,Arial,sans-serif;
        font-size: 14px;
        font-weight: 500;
        height: 48px;
        justify-content: center;
        letter-spacing: .25px;
        line-height: normal;
        max-width: 100%;
        overflow: visible;
        padding: 2px 24px;
        position: relative;
        text-align: center;
        text-transform: none;
        transition: box-shadow 280ms cubic-bezier(.4, 0, .2, 1),opacity 15ms linear 30ms,transform 270ms cubic-bezier(0, 0, .2, 1) 0ms;
        user-select: none;
        -webkit-user-select: none;
        touch-action: manipulation;
        width: auto;
        will-change: transform,opacity;
        z-index: 0;
    }

    .button-17:hover {
        background: #F6F9FE;
        color: #174ea6;
    }

    .button-17:active {
        box-shadow: 0 4px 4px 0 rgb(60 64 67 / 30%), 0 8px 12px 6px rgb(60 64 67 / 15%);
        outline: none;
    }

    .button-17:focus {
        outline: none;
        border: 2px solid #4285f4;
    }

    .button-17:not(:disabled) {
        box-shadow: rgba(60, 64, 67, .3) 0 1px 3px 0, rgba(60, 64, 67, .15) 0 4px 8px 3px;
    }

        .button-17:not(:disabled):hover {
            box-shadow: rgba(60, 64, 67, .3) 0 2px 3px 0, rgba(60, 64, 67, .15) 0 6px 10px 4px;
        }

        .button-17:not(:disabled):focus {
            box-shadow: rgba(60, 64, 67, .3) 0 1px 3px 0, rgba(60, 64, 67, .15) 0 4px 8px 3px;
        }

        .button-17:not(:disabled):active {
            box-shadow: rgba(60, 64, 67, .3) 0 4px 4px 0, rgba(60, 64, 67, .15) 0 8px 12px 6px;
        }

    .button-17:disabled {
        box-shadow: rgba(60, 64, 67, .3) 0 1px 3px 0, rgba(60, 64, 67, .15) 0 4px 8px 3px;
    }
</style>

@if (produtos is null)
{
        <p><em>A carregar...</em></p>
}
else
{
    <div class="col-12 mb-3"><h4>Produtos</h4></div>
           @foreach (var produto in produtos)
            {

                <div class="container">
                    <div class="row">
                        <div class="card-body-x">
                            <div class="row my-2">
                                <div class="col-sm-6 col-md-4 col-xl-3 mb-5">
                                    <div class="item rounded-xl overflow-hidden shadow border">
                                        <div class="px-3 pt-6">
                                            <div> <img src="@produto.Imagem" class="img-thumbail" /> </div>
                                            <div>
                                                <div class="row d-flex align-items-center mb-6">
                                                    <center>
                                                        <button class="button-17" @onclick="() => Navigate(produto)"> @produto.Nome </button>
                                                    </center>
                                                </div>
                                            </div>
                                            <br />
                                            <div class="col-4">
                                                <h5 class="text-right m-0">@produto.Preco€</h5>
                                            </div>
                                            <br />
                                        </div>
                                    </div>
                                    <center>
                                        <button class="button-17"> <i class="text-center"></i> Adicionar ao Carrinho</button>
                                    </center>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                      
           }
}


@code {

    private List<ApplicationProduto> produtos = new List<ApplicationProduto>();
    private List<ApplicationUser> utilizadores = new List<ApplicationUser>();
    private ApplicationBarraca barraca = new ApplicationBarraca();

    [Parameter]
    public string UrlBarracas { get; set; }

    public ApplicationBarraca? GetBarracas(List<ApplicationBarraca> barracas, string NomeBarraca)
    {

        foreach (var b in barracas)
        {
            
            if (b.Nome == NomeBarraca)
            {

                return b;
            }
        }
        return null;
    }



    protected override async Task OnInitializedAsync()
    {
        barraca = GetBarracas(await _dbb.GetBarracas(), UrlBarracas);
        produtos = await _dbp.GetProdutosByBarraca(barraca.Id_Barracas);

    }

    public ApplicationUser? GetVendedor(string id)
    {
        foreach (var vendedor in utilizadores)
        {
            if (vendedor.TipoDeConta == "2")
            {
                if (vendedor.Id== id)
                {
                    return vendedor;
                }
            }
        }
        return null;
    }
    
    void Navigate(ApplicationProduto p)
    {

        UriHelper.NavigateTo(UrlProduto(p));


    }

    string UrlProduto(ApplicationProduto p)
    {
        return p.Nome;
    }

}
