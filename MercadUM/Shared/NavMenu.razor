@using MercadUM.Model;
@using MercadUM.SqlDataAccess;
@inject IUserAccess _dbu
@inject AuthenticationStateProvider AuthenticationStateProvider

<div class="top-row ps-3 navbar navbar-dark">
    <div class="container-fluid">
        <a class="navbar-brand" href="">MercadUM</a>
        <button title="Navigation menu" class="navbar-toggler" @onclick="ToggleNavMenu">
            <span class="navbar-toggler-icon"></span>
        </button>
    </div>
</div>

<div class="@NavMenuCssClass" @onclick="ToggleNavMenu">
    <nav class="flex-column">
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="" Match="NavLinkMatch.All">
                <span class="oi oi-home" aria-hidden="true"></span> Home
            </NavLink>
        </div>
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="counter">
                <span class="oi oi-plus" aria-hidden="true"></span> Counter
            </NavLink>
        </div>
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="Feiras">
                <span class="oi oi-spreadsheet" aria-hidden="true"></span> Feiras a Decorrer
            </NavLink>
        </div>
        @if(user_access.TipoDeConta == "1")
        {
            <div class="nav-item px-3">
                <NavLink class="nav-link" href="AdicionarFeira">
                    <span class="oi oi-plus" aria-hidden="true"></span> Adicionar Feira
                </NavLink>
            </div>
        }
    </nav>
</div>

@code {
    private bool collapseNavMenu = true;

    private string? NavMenuCssClass => collapseNavMenu ? "collapse" : null;

    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }

    private ApplicationUser user_access = new ApplicationUser();
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        if (user.Identity.IsAuthenticated)
        {
            List<ApplicationUser> arg = await _dbu.GetUserByEmail(user.Identity.Name);
            user_access = arg[0];

        }

    }

}
